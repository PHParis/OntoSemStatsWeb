@page "/"

@using OntoSemStatsLib
@inject IJSRuntime JSRuntime
@* @inject SparqlService SparqlService *@

<h1>Enter your endpoint</h1>
<!-- 
<p>This component demonstrates fetching data from a service.</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button> -->

<EditForm Model="@semStatsResult" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
    <label for="SparqlEndpointUri">SPARQL endpoint URI: </label>
    <InputText id="SparqlEndpointUri" @bind-Value="semStatsResult.Endpoint" />
    </p>
    <button type="submit">Submit</button>
</EditForm>

<div>
    @Message
</div>

<div>
    @if (semStatsResult != null && !string.IsNullOrWhiteSpace(semStatsResult.Svg))
    {
        <button @onclick="DownloadFile">Download</button>
        @((MarkupString)semStatsResult.Svg)
    }
</div>

<div>
    @if (semStatsResult.Result != null && semStatsResult.Result.Any())
    {
        <table class="table">
            <thead>
              <tr>
                <th scope="col">Feature</th>
                <th scope="col">Definition count</th>
                <th scope="col">Usage</th>
              </tr>
            </thead>
            <tbody>
        @foreach (var result in semStatsResult.Result)
        {
            <tr>
                <td>@result.Key</td>
                <td>@result.Value["definitionsCount"]</td>
                <td>@(result.Value.Keys.Contains("triples") ? result.Value["triples"] : "NA")</td>
            </tr>
        }
        </tbody>
        </table>
    }
    
</div>


@code {

    /*protected override async Task OnInitializedAsync()
    {
        forecasts = await SparqlService.GetDataAsync("http://dbpedia.org/sparql");
    } */
    private string Message = "";
    private SemStatsResult semStatsResult = new SemStatsResult();
    private async Task HandleValidSubmit()
    {
        Message = "Please wait while processing...";
        await Task<SemStatsResult>.Factory.StartNew(() => 
            semStatsResult.Get());
        Message = "";
    }
    
    // https://wellsb.com/csharp/aspnet/blazor-jsinterop-save-file/
    public async void DownloadFile()
    {
        var fileName = "instance.ttl";
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            fileName,
            semStatsResult.ToTurtle()
        );
    }
    /*private OntologyResult ontologyResult = new OntologyResult();
    private async Task HandleValidSubmit()
    {
        Message = "Please wait while processing...";
        Console.WriteLine("OnValidSubmit");
        await SparqlService.GetDataAsync(ontologyResult);
        Message = "";
    }*/
}
