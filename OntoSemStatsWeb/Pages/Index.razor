@page "/"

@using OntoSemStatsLib
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<main>
    <div class="container">
        <div class="text-center">
            <h1>OntoSemStats</h1>
            <h2>Welcome!</h2>
        </div>            
        <article>
            <header class="font-weight-bold">What is OntoSemStats?</header>
            <p>
                @* TODO: replace real URL *@
                <a href="ANONYMOUS" target="_blank" rel="noopener noreferrer">OntoSemStats</a>
            is an ontology. Its purpose is to provide <span class="font-italic">statistics about semantics usage</span> of a given knowledge graph.
            </p>
            <p>The present web application is here to bring you the <span class="font-italic">instantiated
            ontology for a given SPARQL endpoint</span>.
            </p>
            <h6 class="font-bold">But why would I use that?</h6>
            For many tasks, different tools can be used. Each tool may have pros and cons, but
            very often they can use different technics to fullfil their purpose.
            What if one of those tool has better results than any other 
            but heavily rely on semantics?
            Then, as a user, you must manually ensure that expected semantic features are defined and/or 
            used in the given knowledge graph.
            <br>
            That's where we can <span class="font-italic">release you from this burden</span> by given you information you expect to have!
        </article>
        <br>
        <div class="container">
            <header class="font-weight-bold">Let's try it!</header>
            <EditForm Model="@semStatsResult" OnValidSubmit="@HandleValidSubmit">
                <div class="form-group">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" role="alert" />
                <p>
                <label for="SparqlEndpointUri">Enter the SPARQL endpoint URI: </label>
                <InputText id="SparqlEndpointUri" placeholder="http://dbpedia.org/sparql" class="form-control" type="url" required @bind-Value="semStatsResult.Endpoint" />
                </p>
                </div>
                <button type="submit" class="btn btn-primary">Let's go!</button>
            </EditForm>
        </div>

    </div>
    <br>
@if (!string.IsNullOrWhiteSpace(Message))
{
    <div class="container alert alert-success" role="alert" >
        @Message
    </div>
}

<br>
@if (!string.IsNullOrWhiteSpace(semStatsResult.ErrorMessage))
{
<div class="container alert alert-danger" role="alert">
    @semStatsResult.ErrorMessage
</div>
}

<div class="container">
    @if (semStatsResult != null && semStatsResult.Instance != null && !semStatsResult.Instance.IsEmpty)
    {
        <button @onclick="DownloadFile" class="btn btn-primary">Download result</button>
    }
</div>
<br>
<div class="container">
    @if (semStatsResult.Result != null && semStatsResult.Result.Any())
    {
        <table class="table">
            <thead>
              <tr>
                <th scope="col">Feature</th>
                <th scope="col">Definition count</th>
                <th scope="col">Usage</th>
              </tr>
            </thead>
            <tbody>
        @foreach (var result in semStatsResult.Result)
        {
            <tr>
                <td>@result.Key</td>
                <td>@result.Value["definitionsCount"]</td>
                <td>@(result.Value.Keys.Contains("triples") ? result.Value["triples"] : "NA")</td>
            </tr>
        }
        </tbody>
        </table>
    }
    
</div>
<br>
<div class="container">
    @if (semStatsResult != null && !string.IsNullOrWhiteSpace(semStatsResult.Svg))
    {
        @((MarkupString)semStatsResult.Svg)
    }
</div>

</main>

@code {
    private string Message = "";
    private SemStatsResult semStatsResult = new SemStatsResult();
    private async Task HandleValidSubmit()
    {
        Message = "Please wait while processing...";
        semStatsResult.Clear();
        semStatsResult.SvgNeeded = true;
        semStatsResult.TmpDir= Configuration.GetValue<string>("tmpdir");
        semStatsResult.Graphvizdir = Configuration.GetValue<string>("graphviz");
        await Task<SemStatsResult>.Factory.StartNew(() => 
            semStatsResult.Get());
        Message = "";
    }

    // https://wellsb.com/csharp/aspnet/blazor-jsinterop-save-file/
    public async void DownloadFile()
    {
        var fileName = "instance.ttl";
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            fileName,
            semStatsResult.ToTurtle()
        );
    }
}
